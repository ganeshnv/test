---
- name: Deploying {{ tower_job_template_name }} Component to {{ dep_env }}
  hosts: "{{ tower_job_template_name }}_{{ dep_env }}_{{ server_type }}"
  vars_files:
    - roles/common/vars/win_common.yml

  pre_tasks:

  roles:
  - { role: common, os_type: windows }
  - { role: chkArtifactDep }

  tasks:
    - block:
        
      - name: Reboot server if pending reboot
        import_role:
          name: chkWinReboot
        when: allow_pending_reboot|default(false) == true   
    
      - name: Download artifact from Artifactory
        import_role:
          name: winDownload
        tags: always

      - name: Unzip artifact to temp location
        import_role:
          name: winUnZip
        tags: always
        
      - name: Stop '{{ win_service }}' Windows Service
        import_role:
          name: winService
        vars:
          win_service_state: stopped
        tags: always  

      - block:
        - name: Component environment config token replacement
          import_role:
            name: winAppConfigToken
          when: app_config == "celestial" or app_config is not defined
          tags: app_config

        - name: Copy component environment config file to target location
          import_role:
            name: winCopyAppConfig
          when: app_config == "file" and app_config is defined
          tags: app_config
        when: app_config == "celestial" or app_config == "file" or app_config is not defined
   
       
   
      - name: install vendor product
        win_shell: "{{ install_command_line }}"
        args:
          chdir: "{{ vendor_exe_path | default(temp_dir) }}"
          executable: cmd
        register: cmd_output
        when: install_command_line is defined
        failed_when: cmd_output.rc not in accept_return_code       
        
        
        
      - name: uninstall vendor product
        win_shell: "{{ uninstall_command_line }}"
        args:
          chdir: "{{ vendor_exe_path | default(temp_dir) }}"
          executable: cmd
        register: cmd_output
        when: uninstall_command_line is defined
        failed_when: cmd_output.rc not in accept_return_code
        
              
      - name: write log
        import_role:
          name: write_log
        when: log_file | default (omit) is defined  

      - name: Edit Registry
        import_role:
          name: winRegistry
        when: win_registry is defined
        
      - name: Uninstall Registry
        import_role:
          name: winRegistryRemove
        when: win_registry_remove is defined

      - name: Set NTFS Permission
        import_role:
          name: winAcl
        when: acl_type is defined
        
      - name: Install to GAC
        import_role:
          name: win_gac
        when: win_gac_vars is defined
        
      - name: Service Config Role
        include_role:
          name: winServiceConfig
        when: win_service_config_vars is defined  
        with_items: "{{ win_service_config_vars }}"
        
      - name: Environment Variable
        import_role:
          name: winEnvironmentVar
        when: win_environment_vars is defined

      - name: Edit PATH Environment Variable
        import_role:
          name: winPath
        when: win_path_elements is defined    
               
          
      - name: Clean component environment config folder
        import_role:
          name: winCleanConfigFolder
        when: app_config == "celestial" or app_config == "file" or app_config is not defined
        tags: always

      - name: Start '{{ win_service }}' Windows Service
        import_role:
          name: winService
        vars:
          win_service_state: started
        tags: always  
        
        
      - name: Clean temp folder
        import_role:
          name: winCleanTempFolder
        tags: always

      - name: Set artifact deployed property in Artifactory
        import_role:
          name: setArtDepl
        when: dep_env not in deployed
        tags: always
        
        
      - name: Remove {{ dep_env }} from deployed property in Artifactory
        import_role:
          name: removeDepArtl
        vars:
          remove_record: true
        when: dep_env in deployed and uninstall_command_line is defined
        
        
      when: dep_env not in deployed or dep_override

  post_tasks:
    - name: Clear facts
      import_role:
        name: clearFacts
      tags: always
